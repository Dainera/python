# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит
# работу скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список
# выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить
# соответствующее сообщение. При этом работа скрипта не должна завершаться.

def exit_and_print():
    print(nums_list)
    exit(1)


def get_number():
    number = input('Enter number: ')
    if number == 'stop':
        exit_and_print()
    if not number.isnumeric():
        raise NotANumberError('Not A Number')
    return number


class NotANumberError(Exception):

    def __init__(self, msg):
        self.msg = msg


if __name__ == "__main__":
    nums_list = []

    while True:
        try:
            num = get_number()
            nums_list.append(num)
        except NotANumberError as e:
            print(e)
